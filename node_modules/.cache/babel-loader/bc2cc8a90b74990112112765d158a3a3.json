{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport * as React from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nimport { AbstractPureComponent2, DISPLAYNAME_PREFIX } from \"@blueprintjs/core\";\n\nvar ResizeSensor2 =\n/** @class */\nfunction (_super) {\n  __extends(ResizeSensor2, _super);\n\n  function ResizeSensor2() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.targetRef = React.createRef();\n    _this.prevElement = undefined;\n    _this.observer = new ResizeObserver(function (entries) {\n      var _a, _b;\n\n      return (_b = (_a = _this.props).onResize) === null || _b === void 0 ? void 0 : _b.call(_a, entries);\n    });\n    return _this;\n  }\n\n  ResizeSensor2.prototype.render = function () {\n    var onlyChild = React.Children.only(this.props.children); // if we're provided a ref to the child already, we don't need to attach one ourselves\n\n    if (this.props.targetRef !== undefined) {\n      return onlyChild;\n    }\n\n    return React.cloneElement(onlyChild, {\n      ref: this.targetRef\n    });\n  };\n\n  ResizeSensor2.prototype.componentDidMount = function () {\n    this.observeElement();\n  };\n\n  ResizeSensor2.prototype.componentDidUpdate = function (prevProps) {\n    this.observeElement(this.props.observeParents !== prevProps.observeParents);\n  };\n\n  ResizeSensor2.prototype.componentWillUnmount = function () {\n    this.observer.disconnect();\n  };\n  /**\n   * Observe the DOM element, if defined and different from the currently\n   * observed element. Pass `force` argument to skip element checks and always\n   * re-observe.\n   */\n\n\n  ResizeSensor2.prototype.observeElement = function (force) {\n    if (force === void 0) {\n      force = false;\n    }\n\n    if (!(this.targetRef.current instanceof Element)) {\n      // stop everything if not defined\n      this.observer.disconnect();\n      return;\n    }\n\n    if (this.targetRef.current === this.prevElement && !force) {\n      // quit if given same element -- nothing to update (unless forced)\n      return;\n    } else {\n      // clear observer list if new element\n      this.observer.disconnect(); // remember element reference for next time\n\n      this.prevElement = this.targetRef.current;\n    } // observer callback is invoked immediately when observing new elements\n\n\n    this.observer.observe(this.targetRef.current);\n\n    if (this.props.observeParents) {\n      var parent_1 = this.targetRef.current.parentElement;\n\n      while (parent_1 != null) {\n        this.observer.observe(parent_1);\n        parent_1 = parent_1.parentElement;\n      }\n    }\n  };\n\n  ResizeSensor2.displayName = DISPLAYNAME_PREFIX + \".ResizeSensor2\";\n  return ResizeSensor2;\n}(AbstractPureComponent2);\n\nexport { ResizeSensor2 };","map":{"version":3,"sources":["../../src/resizeSensor2.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport * as React from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nimport { AbstractPureComponent2, DISPLAYNAME_PREFIX } from \"@blueprintjs/core\";\nvar ResizeSensor2 = /** @class */ (function (_super) {\n    __extends(ResizeSensor2, _super);\n    function ResizeSensor2() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.targetRef = React.createRef();\n        _this.prevElement = undefined;\n        _this.observer = new ResizeObserver(function (entries) { var _a, _b; return (_b = (_a = _this.props).onResize) === null || _b === void 0 ? void 0 : _b.call(_a, entries); });\n        return _this;\n    }\n    ResizeSensor2.prototype.render = function () {\n        var onlyChild = React.Children.only(this.props.children);\n        // if we're provided a ref to the child already, we don't need to attach one ourselves\n        if (this.props.targetRef !== undefined) {\n            return onlyChild;\n        }\n        return React.cloneElement(onlyChild, { ref: this.targetRef });\n    };\n    ResizeSensor2.prototype.componentDidMount = function () {\n        this.observeElement();\n    };\n    ResizeSensor2.prototype.componentDidUpdate = function (prevProps) {\n        this.observeElement(this.props.observeParents !== prevProps.observeParents);\n    };\n    ResizeSensor2.prototype.componentWillUnmount = function () {\n        this.observer.disconnect();\n    };\n    /**\n     * Observe the DOM element, if defined and different from the currently\n     * observed element. Pass `force` argument to skip element checks and always\n     * re-observe.\n     */\n    ResizeSensor2.prototype.observeElement = function (force) {\n        if (force === void 0) { force = false; }\n        if (!(this.targetRef.current instanceof Element)) {\n            // stop everything if not defined\n            this.observer.disconnect();\n            return;\n        }\n        if (this.targetRef.current === this.prevElement && !force) {\n            // quit if given same element -- nothing to update (unless forced)\n            return;\n        }\n        else {\n            // clear observer list if new element\n            this.observer.disconnect();\n            // remember element reference for next time\n            this.prevElement = this.targetRef.current;\n        }\n        // observer callback is invoked immediately when observing new elements\n        this.observer.observe(this.targetRef.current);\n        if (this.props.observeParents) {\n            var parent_1 = this.targetRef.current.parentElement;\n            while (parent_1 != null) {\n                this.observer.observe(parent_1);\n                parent_1 = parent_1.parentElement;\n            }\n        }\n    };\n    ResizeSensor2.displayName = DISPLAYNAME_PREFIX + \".ResizeSensor2\";\n    return ResizeSensor2;\n}(AbstractPureComponent2));\nexport { ResizeSensor2 };\n//# sourceMappingURL=resizeSensor2.js.map"]},"metadata":{},"sourceType":"module"}