{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Popper placement utils\n// ======================\n\n/** Converts a full placement to one of the four positions by stripping text after the `-`. */\nexport function getBasePlacement(placement) {\n  return placement.split(\"-\")[0];\n}\n/** Returns true if position is left or right. */\n\nexport function isVerticalPlacement(side) {\n  return [\"left\", \"right\"].indexOf(side) !== -1;\n}\n/** Returns the opposite position. */\n\nexport function getOppositePlacement(side) {\n  switch (side) {\n    case \"top\":\n      return \"bottom\";\n\n    case \"left\":\n      return \"right\";\n\n    case \"bottom\":\n      return \"top\";\n\n    default:\n      return \"left\";\n  }\n}\n/** Returns the CSS alignment keyword corresponding to given placement. */\n\nexport function getAlignment(placement) {\n  var align = placement.split(\"-\")[1];\n\n  switch (align) {\n    case \"start\":\n      return \"left\";\n\n    case \"end\":\n      return \"right\";\n\n    default:\n      return \"center\";\n  }\n} // Popper modifiers\n// ================\n\n/** Modifier helper function to compute popper transform-origin based on arrow position */\n\nexport function getTransformOrigin(placement, arrowStyles) {\n  var basePlacement = getBasePlacement(placement);\n\n  if (arrowStyles === undefined) {\n    return isVerticalPlacement(basePlacement) ? getOppositePlacement(basePlacement) + \" \" + getAlignment(basePlacement) : getAlignment(basePlacement) + \" \" + getOppositePlacement(basePlacement);\n  } else {\n    // const arrowSizeShift = state.elements.arrow.clientHeight / 2;\n    var arrowSizeShift = 30 / 2; // can use keyword for dimension without the arrow, to ease computation burden.\n    // move origin by half arrow's height to keep it centered.\n\n    return isVerticalPlacement(basePlacement) ? getOppositePlacement(basePlacement) + \" \" + (parseInt(arrowStyles.top, 10) + arrowSizeShift) + \"px\" : parseInt(arrowStyles.left, 10) + arrowSizeShift + \"px \" + getOppositePlacement(basePlacement);\n  }\n}","map":{"version":3,"sources":["../../src/utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA;AACA;;AAEA;AACA,OAAM,SAAU,gBAAV,CAA2B,SAA3B,EAA+C;AACjD,SAAO,SAAS,CAAC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAP;AACH;AAED;;AACA,OAAM,SAAU,mBAAV,CAA8B,IAA9B,EAAiD;AACnD,SAAO,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,CAA0B,IAA1B,MAAoC,CAAC,CAA5C;AACH;AAED;;AACA,OAAM,SAAU,oBAAV,CAA+B,IAA/B,EAAkD;AACpD,UAAQ,IAAR;AACI,SAAK,KAAL;AACI,aAAO,QAAP;;AACJ,SAAK,MAAL;AACI,aAAO,OAAP;;AACJ,SAAK,QAAL;AACI,aAAO,KAAP;;AACJ;AACI,aAAO,MAAP;AARR;AAUH;AAED;;AACA,OAAM,SAAU,YAAV,CAAuB,SAAvB,EAA2C;AAC7C,MAAM,KAAK,GAAG,SAAS,CAAC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAd;;AACA,UAAQ,KAAR;AACI,SAAK,OAAL;AACI,aAAO,MAAP;;AACJ,SAAK,KAAL;AACI,aAAO,OAAP;;AACJ;AACI,aAAO,QAAP;AANR;AAQH,C,CAED;AACA;;AAEA;;AACA,OAAM,SAAU,kBAAV,CAA6B,SAA7B,EAAmD,WAAnD,EAAyG;AAC3G,MAAM,aAAa,GAAG,gBAAgB,CAAC,SAAD,CAAtC;;AACA,MAAI,WAAW,KAAK,SAApB,EAA+B;AAC3B,WAAO,mBAAmB,CAAC,aAAD,CAAnB,GACE,oBAAoB,CAAC,aAAD,CAApB,GAAmC,GAAnC,GAAuC,YAAY,CAAC,aAAD,CADrD,GAEE,YAAY,CAAC,aAAD,CAAZ,GAA2B,GAA3B,GAA+B,oBAAoB,CAAC,aAAD,CAF5D;AAGH,GAJD,MAIO;AACH;AACA,QAAM,cAAc,GAAG,KAAK,CAA5B,CAFG,CAGH;AACA;;AACA,WAAO,mBAAmB,CAAC,aAAD,CAAnB,GACE,oBAAoB,CAAC,aAAD,CAApB,GAAmC,GAAnC,IAAuC,QAAQ,CAAC,WAAW,CAAC,GAAb,EAAkB,EAAlB,CAAR,GAAgC,cAAvE,IAAqF,IADvF,GAEE,QAAQ,CAAC,WAAW,CAAC,IAAb,EAAmB,EAAnB,CAAR,GAAiC,cAAjC,GAA+C,KAA/C,GAAqD,oBAAoB,CAAC,aAAD,CAFlF;AAGH;AACJ","sourceRoot":"","sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Popper placement utils\n// ======================\n/** Converts a full placement to one of the four positions by stripping text after the `-`. */\nexport function getBasePlacement(placement) {\n    return placement.split(\"-\")[0];\n}\n/** Returns true if position is left or right. */\nexport function isVerticalPlacement(side) {\n    return [\"left\", \"right\"].indexOf(side) !== -1;\n}\n/** Returns the opposite position. */\nexport function getOppositePlacement(side) {\n    switch (side) {\n        case \"top\":\n            return \"bottom\";\n        case \"left\":\n            return \"right\";\n        case \"bottom\":\n            return \"top\";\n        default:\n            return \"left\";\n    }\n}\n/** Returns the CSS alignment keyword corresponding to given placement. */\nexport function getAlignment(placement) {\n    var align = placement.split(\"-\")[1];\n    switch (align) {\n        case \"start\":\n            return \"left\";\n        case \"end\":\n            return \"right\";\n        default:\n            return \"center\";\n    }\n}\n// Popper modifiers\n// ================\n/** Modifier helper function to compute popper transform-origin based on arrow position */\nexport function getTransformOrigin(placement, arrowStyles) {\n    var basePlacement = getBasePlacement(placement);\n    if (arrowStyles === undefined) {\n        return isVerticalPlacement(basePlacement)\n            ? getOppositePlacement(basePlacement) + \" \" + getAlignment(basePlacement)\n            : getAlignment(basePlacement) + \" \" + getOppositePlacement(basePlacement);\n    }\n    else {\n        // const arrowSizeShift = state.elements.arrow.clientHeight / 2;\n        var arrowSizeShift = 30 / 2;\n        // can use keyword for dimension without the arrow, to ease computation burden.\n        // move origin by half arrow's height to keep it centered.\n        return isVerticalPlacement(basePlacement)\n            ? getOppositePlacement(basePlacement) + \" \" + (parseInt(arrowStyles.top, 10) + arrowSizeShift) + \"px\"\n            : parseInt(arrowStyles.left, 10) + arrowSizeShift + \"px \" + getOppositePlacement(basePlacement);\n    }\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}